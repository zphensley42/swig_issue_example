/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.zhen.foo;

public class NoWrapMap extends java.util.AbstractMap<NoWrapStringType, NoWrapStringType> {
  private transient long swigCPtr;
  protected transient boolean swigCMemOwn;

  protected NoWrapMap(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(NoWrapMap obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  @SuppressWarnings("deprecation")
  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        FooModuleJNI.delete_NoWrapMap(swigCPtr);
      }
      swigCPtr = 0;
    }
  }


  public int size() {
    return sizeImpl();
  }

  public boolean containsKey(java.lang.Object key) {
    if (!(key instanceof NoWrapStringType)) {
      return false;
    }

    return containsImpl((NoWrapStringType)key);
  }

  public NoWrapStringType get(java.lang.Object key) {
    if (!(key instanceof NoWrapStringType)) {
      return null;
    }

    Iterator itr = find((NoWrapStringType) key);
    if (itr.isNot(end())) {
      return itr.getValue();
    }

    return null;
  }

  public NoWrapStringType put(NoWrapStringType key, NoWrapStringType value) {
    Iterator itr = find((NoWrapStringType) key);
    if (itr.isNot(end())) {
      NoWrapStringType oldValue = itr.getValue();
      itr.setValue(value);
      return oldValue;
    } else {
      putUnchecked(key, value);
      return null;
    }
  }

  public NoWrapStringType remove(java.lang.Object key) {
    if (!(key instanceof NoWrapStringType)) {
      return null;
    }

    Iterator itr = find((NoWrapStringType) key);
    if (itr.isNot(end())) {
      NoWrapStringType oldValue = itr.getValue();
      removeUnchecked(itr);
      return oldValue;
    } else {
      return null;
    }
  }

  public java.util.Set<Entry<NoWrapStringType, NoWrapStringType>> entrySet() {
    java.util.Set<Entry<NoWrapStringType, NoWrapStringType>> setToReturn =
        new java.util.HashSet<Entry<NoWrapStringType, NoWrapStringType>>();

    Iterator itr = begin();
    final Iterator end = end();
    while (itr.isNot(end)) {
      setToReturn.add(new Entry<NoWrapStringType, NoWrapStringType>() {
        private Iterator iterator;

        private Entry<NoWrapStringType, NoWrapStringType> init(Iterator iterator) {
          this.iterator = iterator;
          return this;
        }

        public NoWrapStringType getKey() {
          return iterator.getKey();
        }

        public NoWrapStringType getValue() {
          return iterator.getValue();
        }

        public NoWrapStringType setValue(NoWrapStringType newValue) {
          NoWrapStringType oldValue = iterator.getValue();
          iterator.setValue(newValue);
          return oldValue;
        }
      }.init(itr));
      itr = itr.getNextUnchecked();
    }

    return setToReturn;
  }

  public NoWrapMap() {
    this(FooModuleJNI.new_NoWrapMap__SWIG_0(), true);
  }

  public NoWrapMap(NoWrapMap other) {
    this(FooModuleJNI.new_NoWrapMap__SWIG_1(NoWrapMap.getCPtr(other), other), true);
  }

  static protected class Iterator {
    private transient long swigCPtr;
    protected transient boolean swigCMemOwn;
  
    protected Iterator(long cPtr, boolean cMemoryOwn) {
      swigCMemOwn = cMemoryOwn;
      swigCPtr = cPtr;
    }
  
    protected static long getCPtr(Iterator obj) {
      return (obj == null) ? 0 : obj.swigCPtr;
    }
  
    @SuppressWarnings("deprecation")
    protected void finalize() {
      delete();
    }
  
    public synchronized void delete() {
      if (swigCPtr != 0) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          FooModuleJNI.delete_NoWrapMap_Iterator(swigCPtr);
        }
        swigCPtr = 0;
      }
    }
  
    private SWIGTYPE_p_std__mapT_ScalarT_std__string_t_ScalarT_std__string_t_std__lessT_ScalarT_std__string_t_t_t__iterator getNextUnchecked() {
      return new SWIGTYPE_p_std__mapT_ScalarT_std__string_t_ScalarT_std__string_t_std__lessT_ScalarT_std__string_t_t_t__iterator(FooModuleJNI.NoWrapMap_Iterator_getNextUnchecked(swigCPtr), true);
    }
  
    private boolean isNot(SWIGTYPE_p_std__mapT_ScalarT_std__string_t_ScalarT_std__string_t_std__lessT_ScalarT_std__string_t_t_t__iterator other) {
      return FooModuleJNI.NoWrapMap_Iterator_isNot(swigCPtr, SWIGTYPE_p_std__mapT_ScalarT_std__string_t_ScalarT_std__string_t_std__lessT_ScalarT_std__string_t_t_t__iterator.getCPtr(other));
    }
  
    private String getKey() {
    // javaout
    return FooModuleJNI.NoWrapMap_Iterator_getKey(swigCPtr);
  }
  
    private String getValue() {
    // javaout
    return FooModuleJNI.NoWrapMap_Iterator_getValue(swigCPtr);
  }
  
    private void setValue(WrapStringType newValue) {
      FooModuleJNI.NoWrapMap_Iterator_setValue(swigCPtr, WrapStringType.getCPtr(newValue), newValue);
    }
  
  }

  public boolean isEmpty() {
    return FooModuleJNI.NoWrapMap_isEmpty(swigCPtr, this);
  }

  public void clear() {
    FooModuleJNI.NoWrapMap_clear(swigCPtr, this);
  }

  private SWIGTYPE_p_std__mapT_ScalarT_std__string_t_ScalarT_std__string_t_std__lessT_ScalarT_std__string_t_t_t__iterator find(WrapStringType key) {
    return new SWIGTYPE_p_std__mapT_ScalarT_std__string_t_ScalarT_std__string_t_std__lessT_ScalarT_std__string_t_t_t__iterator(FooModuleJNI.NoWrapMap_find(swigCPtr, this, WrapStringType.getCPtr(key), key), true);
  }

  private SWIGTYPE_p_std__mapT_ScalarT_std__string_t_ScalarT_std__string_t_std__lessT_ScalarT_std__string_t_t_t__iterator begin() {
    return new SWIGTYPE_p_std__mapT_ScalarT_std__string_t_ScalarT_std__string_t_std__lessT_ScalarT_std__string_t_t_t__iterator(FooModuleJNI.NoWrapMap_begin(swigCPtr, this), true);
  }

  private SWIGTYPE_p_std__mapT_ScalarT_std__string_t_ScalarT_std__string_t_std__lessT_ScalarT_std__string_t_t_t__iterator end() {
    return new SWIGTYPE_p_std__mapT_ScalarT_std__string_t_ScalarT_std__string_t_std__lessT_ScalarT_std__string_t_t_t__iterator(FooModuleJNI.NoWrapMap_end(swigCPtr, this), true);
  }

  private int sizeImpl() {
    return FooModuleJNI.NoWrapMap_sizeImpl(swigCPtr, this);
  }

  private boolean containsImpl(WrapStringType key) {
    return FooModuleJNI.NoWrapMap_containsImpl(swigCPtr, this, WrapStringType.getCPtr(key), key);
  }

  private void putUnchecked(WrapStringType key, WrapStringType value) {
    FooModuleJNI.NoWrapMap_putUnchecked(swigCPtr, this, WrapStringType.getCPtr(key), key, WrapStringType.getCPtr(value), value);
  }

  private void removeUnchecked(SWIGTYPE_p_std__mapT_ScalarT_std__string_t_ScalarT_std__string_t_std__lessT_ScalarT_std__string_t_t_t__iterator itr) {
    FooModuleJNI.NoWrapMap_removeUnchecked(swigCPtr, this, SWIGTYPE_p_std__mapT_ScalarT_std__string_t_ScalarT_std__string_t_std__lessT_ScalarT_std__string_t_t_t__iterator.getCPtr(itr));
  }

}
