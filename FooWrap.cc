/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 4.0.2
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */


#ifndef SWIGJAVA
#define SWIGJAVA
#endif

#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__))
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__))
# else
#   define SWIGUNUSED
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if defined(__GNUC__)
#  if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#    ifndef GCC_HASCLASSVISIBILITY
#      define GCC_HASCLASSVISIBILITY
#    endif
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif

/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */
#if defined(__APPLE__) && !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)
# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
#endif

/* Intel's compiler complains if a variable which was never initialised is
 * cast to void, which is a common idiom which we use to indicate that we
 * are aware a variable isn't used.  So we just silence that warning.
 * See: https://github.com/swig/swig/issues/192 for more discussion.
 */
#ifdef __INTEL_COMPILER
# pragma warning disable 592
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1,
  SWIG_JavaIOException,
  SWIG_JavaRuntimeException,
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError,
  SWIG_JavaIllegalStateException,
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { SWIG_JavaIllegalStateException, "java/lang/IllegalStateException" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" }
  };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * director_common.swg
 *
 * This file contains support for director classes which is common between
 * languages.
 * ----------------------------------------------------------------------------- */

/*
  Use -DSWIG_DIRECTOR_STATIC if you prefer to avoid the use of the
  'Swig' namespace. This could be useful for multi-modules projects.
*/
#ifdef SWIG_DIRECTOR_STATIC
/* Force anonymous (static) namespace */
#define Swig
#endif
/* -----------------------------------------------------------------------------
 * director.swg
 *
 * This file contains support for director classes so that Java proxy
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#if defined(DEBUG_DIRECTOR_OWNED) || defined(DEBUG_DIRECTOR_EXCEPTION) || defined(DEBUG_DIRECTOR_THREAD_NAME)
#include <iostream>
#endif

#include <exception>

#if defined(SWIG_JAVA_USE_THREAD_NAME)

#if !defined(SWIG_JAVA_GET_THREAD_NAME)
namespace Swig {
  SWIGINTERN int GetThreadName(char *name, size_t len);
}

#if defined(__linux__)

#include <sys/prctl.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
#if defined(PR_GET_NAME)
  return prctl(PR_GET_NAME, (unsigned long)name, 0, 0, 0);
#else
  (void)name;
  return 1;
#endif
}

#elif defined(__unix__) || defined(__APPLE__)

#include <pthread.h>
SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  return pthread_getname_np(pthread_self(), name, len);
}

#else

SWIGINTERN int Swig::GetThreadName(char *name, size_t len) {
  (void)len;
  (void)name;
  return 1;
}
#endif

#endif

#endif

namespace Swig {

  /* Java object wrapper */
  class JObjectWrapper {
  public:
    JObjectWrapper() : jthis_(NULL), weak_global_(true) {
    }

    ~JObjectWrapper() {
      jthis_ = NULL;
      weak_global_ = true;
    }

    bool set(JNIEnv *jenv, jobject jobj, bool mem_own, bool weak_global) {
      if (!jthis_) {
        weak_global_ = weak_global || !mem_own; // hold as weak global if explicitly requested or not owned
        if (jobj)
          jthis_ = weak_global_ ? jenv->NewWeakGlobalRef(jobj) : jenv->NewGlobalRef(jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> " << jthis_ << std::endl;
#endif
        return true;
      } else {
#if defined(DEBUG_DIRECTOR_OWNED)
        std::cout << "JObjectWrapper::set(" << jobj << ", " << (weak_global ? "weak_global" : "global_ref") << ") -> already set" << std::endl;
#endif
        return false;
      }
    }

    jobject get(JNIEnv *jenv) const {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::get(";
      if (jthis_)
        std::cout << jthis_;
      else
        std::cout << "null";
      std::cout << ") -> return new local ref" << std::endl;
#endif
      return (jthis_ ? jenv->NewLocalRef(jthis_) : jthis_);
    }

    void release(JNIEnv *jenv) {
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "JObjectWrapper::release(" << jthis_ << "): " << (weak_global_ ? "weak global ref" : "global ref") << std::endl;
#endif
      if (jthis_) {
        if (weak_global_) {
          if (jenv->IsSameObject(jthis_, NULL) == JNI_FALSE)
            jenv->DeleteWeakGlobalRef((jweak)jthis_);
        } else
          jenv->DeleteGlobalRef(jthis_);
      }

      jthis_ = NULL;
      weak_global_ = true;
    }

    /* Only call peek if you know what you are doing wrt to weak/global references */
    jobject peek() {
      return jthis_;
    }

    /* Java proxy releases ownership of C++ object, C++ object is now
       responsible for destruction (creates NewGlobalRef to pin Java proxy) */
    void java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      if (take_or_release) {  /* Java takes ownership of C++ object's lifetime. */
        if (!weak_global_) {
          jenv->DeleteGlobalRef(jthis_);
          jthis_ = jenv->NewWeakGlobalRef(jself);
          weak_global_ = true;
        }
      } else {
	/* Java releases ownership of C++ object's lifetime */
        if (weak_global_) {
          jenv->DeleteWeakGlobalRef((jweak)jthis_);
          jthis_ = jenv->NewGlobalRef(jself);
          weak_global_ = false;
        }
      }
    }

  private:
    /* pointer to Java object */
    jobject jthis_;
    /* Local or global reference flag */
    bool weak_global_;
  };

  /* Local JNI reference deleter */
  class LocalRefGuard {
    JNIEnv *jenv_;
    jobject jobj_;

    // non-copyable
    LocalRefGuard(const LocalRefGuard &);
    LocalRefGuard &operator=(const LocalRefGuard &);
  public:
    LocalRefGuard(JNIEnv *jenv, jobject jobj): jenv_(jenv), jobj_(jobj) {}
    ~LocalRefGuard() {
      if (jobj_)
        jenv_->DeleteLocalRef(jobj_);
    }
  };

  /* director base class */
  class Director {
    /* pointer to Java virtual machine */
    JavaVM *swig_jvm_;

  protected:
#if defined (_MSC_VER) && (_MSC_VER<1300)
    class JNIEnvWrapper;
    friend class JNIEnvWrapper;
#endif
    /* Utility class for managing the JNI environment */
    class JNIEnvWrapper {
      const Director *director_;
      JNIEnv *jenv_;
      int env_status;
    public:
      JNIEnvWrapper(const Director *director) : director_(director), jenv_(0), env_status(0) {
#if defined(__ANDROID__)
        JNIEnv **jenv = &jenv_;
#else
        void **jenv = (void **)&jenv_;
#endif
        env_status = director_->swig_jvm_->GetEnv((void **)&jenv_, JNI_VERSION_1_2);
        JavaVMAttachArgs args;
        args.version = JNI_VERSION_1_2;
        args.group = NULL;
        args.name = NULL;
#if defined(SWIG_JAVA_USE_THREAD_NAME)
        char thread_name[64];  // MAX_TASK_COMM_LEN=16 is hard-coded in the Linux kernel and MacOS has MAXTHREADNAMESIZE=64.
        if (Swig::GetThreadName(thread_name, sizeof(thread_name)) == 0) {
          args.name = thread_name;
#if defined(DEBUG_DIRECTOR_THREAD_NAME)
          std::cout << "JNIEnvWrapper: thread name: " << thread_name << std::endl;
        } else {
          std::cout << "JNIEnvWrapper: Couldn't set Java thread name" << std::endl;
#endif
        }
#endif
#if defined(SWIG_JAVA_ATTACH_CURRENT_THREAD_AS_DAEMON)
        // Attach a daemon thread to the JVM. Useful when the JVM should not wait for
        // the thread to exit upon shutdown. Only for jdk-1.4 and later.
        director_->swig_jvm_->AttachCurrentThreadAsDaemon(jenv, &args);
#else
        director_->swig_jvm_->AttachCurrentThread(jenv, &args);
#endif
      }
      ~JNIEnvWrapper() {
#if !defined(SWIG_JAVA_NO_DETACH_CURRENT_THREAD)
        // Some JVMs, eg jdk-1.4.2 and lower on Solaris have a bug and crash with the DetachCurrentThread call.
        // However, without this call, the JVM hangs on exit when the thread was not created by the JVM and creates a memory leak.
        if (env_status == JNI_EDETACHED)
          director_->swig_jvm_->DetachCurrentThread();
#endif
      }
      JNIEnv *getJNIEnv() const {
        return jenv_;
      }
    };

    /* Java object wrapper */
    JObjectWrapper swig_self_;

    /* Disconnect director from Java object */
    void swig_disconnect_director_self(const char *disconn_method) {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      jobject jobj = swig_self_.get(jenv);
      LocalRefGuard ref_deleter(jenv, jobj);
#if defined(DEBUG_DIRECTOR_OWNED)
      std::cout << "Swig::Director::disconnect_director_self(" << jobj << ")" << std::endl;
#endif
      if (jobj && jenv->IsSameObject(jobj, NULL) == JNI_FALSE) {
        jmethodID disconn_meth = jenv->GetMethodID(jenv->GetObjectClass(jobj), disconn_method, "()V");
        if (disconn_meth) {
#if defined(DEBUG_DIRECTOR_OWNED)
          std::cout << "Swig::Director::disconnect_director_self upcall to " << disconn_method << std::endl;
#endif
          jenv->CallVoidMethod(jobj, disconn_meth);
        }
      }
    }

  public:
    Director(JNIEnv *jenv) : swig_jvm_((JavaVM *) NULL), swig_self_() {
      /* Acquire the Java VM pointer */
      jenv->GetJavaVM(&swig_jvm_);
    }

    virtual ~Director() {
      JNIEnvWrapper jnienv(this) ;
      JNIEnv *jenv = jnienv.getJNIEnv() ;
      swig_self_.release(jenv);
    }

    bool swig_set_self(JNIEnv *jenv, jobject jself, bool mem_own, bool weak_global) {
      return swig_self_.set(jenv, jself, mem_own, weak_global);
    }

    jobject swig_get_self(JNIEnv *jenv) const {
      return swig_self_.get(jenv);
    }

    // Change C++ object's ownership, relative to Java
    void swig_java_change_ownership(JNIEnv *jenv, jobject jself, bool take_or_release) {
      swig_self_.java_change_ownership(jenv, jself, take_or_release);
    }
  };

  // Zero initialized bool array
  template<size_t N> class BoolArray {
    bool array_[N];
  public:
    BoolArray() {
      memset(array_, 0, sizeof(array_));
    }
    bool& operator[](size_t n) {
      return array_[n];
    }
    bool operator[](size_t n) const {
      return array_[n];
    }
  };

  // Utility classes and functions for exception handling.

  // Simple holder for a Java string during exception handling, providing access to a c-style string
  class JavaString {
  public:
    JavaString(JNIEnv *jenv, jstring jstr) : jenv_(jenv), jstr_(jstr), cstr_(0) {
      if (jenv_ && jstr_)
	cstr_ = (const char *) jenv_->GetStringUTFChars(jstr_, NULL);
    }

    ~JavaString() {
      if (jenv_ && jstr_ && cstr_)
	jenv_->ReleaseStringUTFChars(jstr_, cstr_);
    }

    const char *c_str(const char *null_string = "null JavaString") const {
      return cstr_ ? cstr_ : null_string;
    }

  private:
    // non-copyable
    JavaString(const JavaString &);
    JavaString &operator=(const JavaString &);

    JNIEnv *jenv_;
    jstring jstr_;
    const char *cstr_;
  };

  // Helper class to extract the exception message from a Java throwable
  class JavaExceptionMessage {
  public:
    JavaExceptionMessage(JNIEnv *jenv, jthrowable throwable) : message_(jenv, exceptionMessageFromThrowable(jenv, throwable)) {
    }

    // Return a C string of the exception message in the jthrowable passed in the constructor
    // If no message is available, null_string is return instead
    const char *message(const char *null_string = "Could not get exception message in JavaExceptionMessage") const {
      return message_.c_str(null_string);
    }

  private:
    // non-copyable
    JavaExceptionMessage(const JavaExceptionMessage &);
    JavaExceptionMessage &operator=(const JavaExceptionMessage &);

    // Get exception message by calling Java method Throwable.getMessage()
    static jstring exceptionMessageFromThrowable(JNIEnv *jenv, jthrowable throwable) {
      jstring jmsg = NULL;
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  // All Throwable classes have a getMessage() method, so call it to extract the exception message
	  jmethodID getMessageMethodID = jenv->GetMethodID(throwclz, "getMessage", "()Ljava/lang/String;");
	  if (getMessageMethodID)
	    jmsg = (jstring)jenv->CallObjectMethod(throwable, getMessageMethodID);
	}
	if (jmsg == NULL && jenv->ExceptionCheck())
	  jenv->ExceptionClear();
      }
      return jmsg;
    }

    JavaString message_;
  };

  // C++ Exception class for handling Java exceptions thrown during a director method Java upcall
  class DirectorException : public std::exception {
  public:

    // Construct exception from a Java throwable
    DirectorException(JNIEnv *jenv, jthrowable throwable) : jenv_(jenv), throwable_(throwable), classname_(0), msg_(0) {

      // Call Java method Object.getClass().getName() to obtain the throwable's class name (delimited by '/')
      if (jenv && throwable) {
	jenv->ExceptionClear(); // Cannot invoke methods with any pending exceptions
	jclass throwclz = jenv->GetObjectClass(throwable);
	if (throwclz) {
	  jclass clzclz = jenv->GetObjectClass(throwclz);
	  if (clzclz) {
	    jmethodID getNameMethodID = jenv->GetMethodID(clzclz, "getName", "()Ljava/lang/String;");
	    if (getNameMethodID) {
	      jstring jstr_classname = (jstring)(jenv->CallObjectMethod(throwclz, getNameMethodID));
              // Copy strings, since there is no guarantee that jenv will be active when handled
              if (jstr_classname) {
                JavaString jsclassname(jenv, jstr_classname);
                const char *classname = jsclassname.c_str(0);
                if (classname)
                  classname_ = copypath(classname);
              }
	    }
	  }
	}
      }

      JavaExceptionMessage exceptionmsg(jenv, throwable);
      msg_ = copystr(exceptionmsg.message(0));
    }

    // More general constructor for handling as a java.lang.RuntimeException
    DirectorException(const char *msg) : jenv_(0), throwable_(0), classname_(0), msg_(msg ? copystr(msg) : 0) {
    }

    ~DirectorException() throw() {
      delete[] classname_;
      delete[] msg_;
    }

    const char *what() const throw() {
      return msg_ ? msg_ : "Unspecified DirectorException message";
    }

    // Reconstruct and raise/throw the Java Exception that caused the DirectorException
    // Note that any error in the JNI exception handling results in a Java RuntimeException
    void throwException(JNIEnv *jenv) const {
      if (jenv) {
        if (jenv == jenv_ && throwable_) {
          // Throw original exception if not already pending
          jthrowable throwable = jenv->ExceptionOccurred();
          if (throwable && jenv->IsSameObject(throwable, throwable_) == JNI_FALSE) {
            jenv->ExceptionClear();
            throwable = 0;
          }
          if (!throwable)
            jenv->Throw(throwable_);
        } else {
          // Try and reconstruct original exception, but original stacktrace is not reconstructed
          jenv->ExceptionClear();

          jmethodID ctorMethodID = 0;
          jclass throwableclass = 0;
          if (classname_) {
            throwableclass = jenv->FindClass(classname_);
            if (throwableclass)
              ctorMethodID = jenv->GetMethodID(throwableclass, "<init>", "(Ljava/lang/String;)V");
          }

          if (ctorMethodID) {
            jenv->ThrowNew(throwableclass, what());
          } else {
            SWIG_JavaThrowException(jenv, SWIG_JavaRuntimeException, what());
          }
        }
      }
    }

    // Deprecated - use throwException
    void raiseJavaException(JNIEnv *jenv) const {
      throwException(jenv);
    }

    // Create and throw the DirectorException
    static void raise(JNIEnv *jenv, jthrowable throwable) {
      throw DirectorException(jenv, throwable);
    }

  private:
    static char *copypath(const char *srcmsg) {
      char *target = copystr(srcmsg);
      for (char *c=target; *c; ++c) {
        if ('.' == *c)
          *c = '/';
      }
      return target;
    }

    static char *copystr(const char *srcmsg) {
      char *target = 0;
      if (srcmsg) {
	size_t msglen = strlen(srcmsg) + 1;
	target = new char[msglen];
	strncpy(target, srcmsg, msglen);
      }
      return target;
    }

    JNIEnv *jenv_;
    jthrowable throwable_;
    const char *classname_;
    const char *msg_;
  };

  // Helper method to determine if a Java throwable matches a particular Java class type
  // Note side effect of clearing any pending exceptions
  SWIGINTERN bool ExceptionMatches(JNIEnv *jenv, jthrowable throwable, const char *classname) {
    bool matches = false;

    if (throwable && jenv && classname) {
      // Exceptions need to be cleared for correct behavior.
      // The caller of ExceptionMatches should restore pending exceptions if desired -
      // the caller already has the throwable.
      jenv->ExceptionClear();

      jclass clz = jenv->FindClass(classname);
      if (clz) {
	jclass classclz = jenv->GetObjectClass(clz);
	jmethodID isInstanceMethodID = jenv->GetMethodID(classclz, "isInstance", "(Ljava/lang/Object;)Z");
	if (isInstanceMethodID) {
	  matches = jenv->CallBooleanMethod(clz, isInstanceMethodID, throwable) != 0;
	}
      }

#if defined(DEBUG_DIRECTOR_EXCEPTION)
      if (jenv->ExceptionCheck()) {
        // Typically occurs when an invalid classname argument is passed resulting in a ClassNotFoundException
        JavaExceptionMessage exc(jenv, jenv->ExceptionOccurred());
        std::cout << "Error: ExceptionMatches: class '" << classname << "' : " << exc.message() << std::endl;
      }
#endif
    }
    return matches;
  }
}


#include "Foo.h"


#include <stdint.h>		// Use the C99 official header


#include <string>


#include <typeinfo>
#include <stdexcept>


#include <map>
#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__iterator_getNextUnchecked(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *self){
          std::map< Scalar< std::string >, Scalar< std::string >, std::less< Scalar< std::string > > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__iterator_isNot(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator const *self,std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator other){
          return (*self != other);
        }
SWIGINTERN Scalar< std::string > std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__iterator_getKey(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN Scalar< std::string > std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__iterator_getValue(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__iterator_setValue(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *self,Scalar< std::string > const &newValue){
          (*self)->second = newValue;
        }

/* Check for overflow converting to Java int (always signed 32-bit) from (unsigned variable-bit) size_t */
SWIGINTERN jint SWIG_JavaIntFromSize_t(size_t size) {
  static const jint JINT_MAX = 0x7FFFFFFF;
  return (size > (size_t)JINT_MAX) ? -1 : (jint)size;
}


  SWIGINTERN jint SWIG_MapSize(size_t size) {
    jint sz = SWIG_JavaIntFromSize_t(size);
    if (sz == -1) {
      throw std::out_of_range("map size is too large to fit into a Java int");
    }

    return sz;
  }

SWIGINTERN jint std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__sizeImpl(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__containsImpl(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *self,Scalar< std::string > const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__putUnchecked(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *self,Scalar< std::string > const &key,Scalar< std::string > const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__removeUnchecked(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *self,std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::map< std::string,std::string,std::less< std::string > >::iterator std_map_Sl_std_string_Sc_std_string_Sg__iterator_getNextUnchecked(std::map< std::string,std::string >::iterator *self){
          std::map< std::string, std::string, std::less< std::string > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__iterator_isNot(std::map< std::string,std::string >::iterator const *self,std::map< std::string,std::string >::iterator other){
          return (*self != other);
        }
SWIGINTERN std::string std_map_Sl_std_string_Sc_std_string_Sg__iterator_getKey(std::map< std::string,std::string >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN std::string std_map_Sl_std_string_Sc_std_string_Sg__iterator_getValue(std::map< std::string,std::string >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__iterator_setValue(std::map< std::string,std::string >::iterator *self,std::string const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_std_string_Sc_std_string_Sg__sizeImpl(std::map< std::string,std::string > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_std_string_Sc_std_string_Sg__containsImpl(std::map< std::string,std::string > *self,std::string const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__putUnchecked(std::map< std::string,std::string > *self,std::string const &key,std::string const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_std_string_Sc_std_string_Sg__removeUnchecked(std::map< std::string,std::string > *self,std::map< std::string,std::string,std::less< std::string > >::iterator const itr){
        self->erase(itr);
      }
SWIGINTERN std::map< Bar,Bar,std::less< Bar > >::iterator std_map_Sl_Bar_Sc_Bar_Sg__iterator_getNextUnchecked(std::map< Bar,Bar >::iterator *self){
          std::map< Bar, Bar, std::less< Bar > >::iterator copy = (*self);
          return ++copy;
        }
SWIGINTERN bool std_map_Sl_Bar_Sc_Bar_Sg__iterator_isNot(std::map< Bar,Bar >::iterator const *self,std::map< Bar,Bar >::iterator other){
          return (*self != other);
        }
SWIGINTERN Bar std_map_Sl_Bar_Sc_Bar_Sg__iterator_getKey(std::map< Bar,Bar >::iterator const *self){
          return (*self)->first;
        }
SWIGINTERN Bar std_map_Sl_Bar_Sc_Bar_Sg__iterator_getValue(std::map< Bar,Bar >::iterator const *self){
          return (*self)->second;
        }
SWIGINTERN void std_map_Sl_Bar_Sc_Bar_Sg__iterator_setValue(std::map< Bar,Bar >::iterator *self,Bar const &newValue){
          (*self)->second = newValue;
        }
SWIGINTERN jint std_map_Sl_Bar_Sc_Bar_Sg__sizeImpl(std::map< Bar,Bar > const *self){
        return SWIG_MapSize(self->size());
      }
SWIGINTERN bool std_map_Sl_Bar_Sc_Bar_Sg__containsImpl(std::map< Bar,Bar > *self,Bar const &key){
        return (self->count(key) > 0);
      }
SWIGINTERN void std_map_Sl_Bar_Sc_Bar_Sg__putUnchecked(std::map< Bar,Bar > *self,Bar const &key,Bar const &value){
        (*self)[key] = value;
      }
SWIGINTERN void std_map_Sl_Bar_Sc_Bar_Sg__removeUnchecked(std::map< Bar,Bar > *self,std::map< Bar,Bar,std::less< Bar > >::iterator const itr){
        self->erase(itr);
      }


/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "FooWrap.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_new_1Foo(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Foo *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Foo *)new Foo();
  *(Foo **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_delete_1Foo(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Foo *arg1 = (Foo *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Foo **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_Foo_1useType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Foo *arg1 = (Foo *) 0 ;
  StringType arg2 ;
  StringType *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Foo **)&jarg1; 
  argp2 = *(StringType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null StringType");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->useType(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_new_1Bar(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Bar *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Bar *)new Bar();
  *(Bar **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_delete_1Bar(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Bar *arg1 = (Bar *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Bar **)&jarg1; 
  delete arg1;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_Bar_1useType(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  Bar *arg1 = (Bar *) 0 ;
  NoWrapStringType arg2 ;
  NoWrapStringType *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Bar **)&jarg1; 
  argp2 = *(NoWrapStringType **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null NoWrapStringType");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->useType(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_new_1Baz(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Baz *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Baz *)new Baz();
  *(Baz **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_delete_1Baz(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Baz *arg1 = (Baz *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Baz **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_Baz_1stdStringMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Baz *arg1 = (Baz *) 0 ;
  std::map< std::string,std::string,std::less< std::string > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Baz **)&jarg1; 
  result = (arg1)->stdStringMap();
  *(std::map< std::string,std::string,std::less< std::string > > **)&jresult = new std::map< std::string,std::string,std::less< std::string > >((const std::map< std::string,std::string,std::less< std::string > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_Baz_1barMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Baz *arg1 = (Baz *) 0 ;
  std::map< Bar,Bar,std::less< Bar > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Baz **)&jarg1; 
  result = (arg1)->barMap();
  *(std::map< Bar,Bar,std::less< Bar > > **)&jresult = new std::map< Bar,Bar,std::less< Bar > >((const std::map< Bar,Bar,std::less< Bar > > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_Baz_1noWrapMap(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  Baz *arg1 = (Baz *) 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(Baz **)&jarg1; 
  result = (arg1)->noWrapMap();
  *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jresult = new std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >((const std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_Baz_1noWrapMapIn(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  Baz *arg1 = (Baz *) 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > arg2 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(Baz **)&jarg1; 
  argp2 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >");
    return ;
  }
  arg2 = *argp2; 
  (arg1)->noWrapMapIn(arg2);
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_new_1WrapStringType_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  Scalar< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (Scalar< std::string > *)new Scalar< std::string >();
  *(Scalar< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_delete_1WrapStringType(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  Scalar< std::string > *arg1 = (Scalar< std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(Scalar< std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_new_1WrapStringType_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jlong jresult = 0 ;
  std::string arg1 ;
  Scalar< std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  if(!jarg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  } 
  const char *arg1_pstr = (const char *)jenv->GetStringUTFChars(jarg1, 0); 
  if (!arg1_pstr) return 0;
  (&arg1)->assign(arg1_pstr);
  jenv->ReleaseStringUTFChars(jarg1, arg1_pstr); 
  result = (Scalar< std::string > *)new Scalar< std::string >(arg1);
  *(Scalar< std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_zhen_foo_FooModuleJNI_WrapStringType_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  Scalar< std::string > *arg1 = (Scalar< std::string > *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  // in
  // Our input is a long ptr to the Scalar<std::string> object, not a jstring
  arg1 = *(Scalar<std::string> **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StringType const & reference is null");
    return 0;
  } 
  result = ((Scalar< std::string > const *)arg1)->get();
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_new_1NoWrapMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *)new std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >();
  *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_new_1NoWrapMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *arg1 = 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > const & reference is null");
    return 0;
  } 
  result = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *)new std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >((std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > const &)*arg1);
  *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *) 0 ;
  SwigValueWrapper< std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator **)&jarg1; 
  result = std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__iterator_getNextUnchecked(arg1);
  *(std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator **)&jresult = new std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator((const std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2) {
  jboolean jresult = 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *) 0 ;
  SwigValueWrapper< std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator > arg2 ;
  std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator **)&jarg1; 
  argp2 = *(std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__iterator_isNot((std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator const *)arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *) 0 ;
  Scalar< std::string > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator **)&jarg1; 
  result = std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__iterator_getKey((std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator const *)arg1);
  // out
  std::string result_str = (&result)->isNull() ? "" : (&result)->get();
  jbyteArray dataBytes = jenv->NewByteArray((jsize) result_str.length());
  jenv->SetByteArrayRegion(dataBytes, 0, (jsize) result_str.length(), (jbyte *) result_str.c_str());
  
  jclass strClazz = jenv->FindClass("java/lang/String");
  jmethodID strClazzInit = jenv->GetMethodID(strClazz, "<init>", "([B)V");
  jobject newObj = jenv->NewObject(strClazz, strClazzInit, dataBytes);
  jresult = static_cast<jstring>(newObj);
  jenv->DeleteLocalRef(dataBytes);
  
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jstring jresult = 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *) 0 ;
  Scalar< std::string > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator **)&jarg1; 
  result = std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__iterator_getValue((std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator const *)arg1);
  // out
  std::string result_str = (&result)->isNull() ? "" : (&result)->get();
  jbyteArray dataBytes = jenv->NewByteArray((jsize) result_str.length());
  jenv->SetByteArrayRegion(dataBytes, 0, (jsize) result_str.length(), (jbyte *) result_str.c_str());
  
  jclass strClazz = jenv->FindClass("java/lang/String");
  jmethodID strClazzInit = jenv->GetMethodID(strClazz, "<init>", "([B)V");
  jobject newObj = jenv->NewObject(strClazz, strClazzInit, dataBytes);
  jresult = static_cast<jstring>(newObj);
  jenv->DeleteLocalRef(dataBytes);
  
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jlong jarg2, jobject jarg2_) {
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *) 0 ;
  Scalar< std::string > *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg2_;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator **)&jarg1; 
  // in
  // Our input is a long ptr to the Scalar<std::string> object, not a jstring
  arg2 = *(Scalar<std::string> **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StringType const & reference is null");
    return ;
  } 
  std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__iterator_setValue(arg1,(Scalar< std::string > const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_delete_1NoWrapMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > >::iterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jarg1; 
  result = (bool)((std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *) 0 ;
  Scalar< std::string > *arg2 = 0 ;
  SwigValueWrapper< std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jarg1; 
  // in
  // Our input is a long ptr to the Scalar<std::string> object, not a jstring
  arg2 = *(Scalar<std::string> **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StringType const & reference is null");
    return 0;
  } 
  result = (arg1)->find((Scalar< std::string > const &)*arg2);
  *(std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator **)&jresult = new std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator((const std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *) 0 ;
  SwigValueWrapper< std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jarg1; 
  result = (arg1)->begin();
  *(std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator **)&jresult = new std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator((const std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *) 0 ;
  SwigValueWrapper< std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator > result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jarg1; 
  result = (arg1)->end();
  *(std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator **)&jresult = new std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator((const std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jarg1; 
  try {
    result = std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__sizeImpl((std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *) 0 ;
  Scalar< std::string > *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jarg1; 
  // in
  // Our input is a long ptr to the Scalar<std::string> object, not a jstring
  arg2 = *(Scalar<std::string> **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StringType const & reference is null");
    return 0;
  } 
  result = (bool)std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__containsImpl(arg1,(Scalar< std::string > const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *) 0 ;
  Scalar< std::string > *arg2 = 0 ;
  Scalar< std::string > *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jarg1; 
  // in
  // Our input is a long ptr to the Scalar<std::string> object, not a jstring
  arg2 = *(Scalar<std::string> **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StringType const & reference is null");
    return ;
  } 
  // in
  // Our input is a long ptr to the Scalar<std::string> object, not a jstring
  arg3 = *(Scalar<std::string> **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "StringType const & reference is null");
    return ;
  } 
  std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__putUnchecked(arg1,(Scalar< std::string > const &)*arg2,(Scalar< std::string > const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_NoWrapMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *) 0 ;
  SwigValueWrapper< std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator > arg2 ;
  std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jarg1; 
  argp2 = *(std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< Scalar< std::string >,Scalar< std::string >,std::less< Scalar< std::string > > >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  std_map_Sl_NoWrapStringType_Sc_NoWrapStringType_Sc_std_less_Sl_NoWrapStringType_Sg__Sg__removeUnchecked(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_delete_1NoWrapMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *arg1 = (std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< NoWrapStringType,NoWrapStringType,std::less< NoWrapStringType > > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_new_1StdStringMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >();
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_new_1StdStringMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = 0 ;
  std::map< std::string,std::string > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< std::string,std::string > const & reference is null");
    return 0;
  } 
  result = (std::map< std::string,std::string > *)new std::map< std::string,std::string >((std::map< std::string,std::string > const &)*arg1);
  *(std::map< std::string,std::string > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< std::string,std::string,std::less< std::string > >::iterator **)&jresult = new std::map< std::string,std::string,std::less< std::string > >::iterator((const std::map< std::string,std::string,std::less< std::string > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::map< std::string,std::string >::iterator arg2 ;
  std::map< std::string,std::string >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  argp2 = *(std::map< std::string,std::string >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__iterator_isNot((std::map< std::string,std::string >::iterator const *)arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getKey((std::map< std::string,std::string >::iterator const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT jstring JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jstring jresult = 0 ;
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  result = std_map_Sl_std_string_Sc_std_string_Sg__iterator_getValue((std::map< std::string,std::string >::iterator const *)arg1);
  jresult = jenv->NewStringUTF((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  std::string *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  std_map_Sl_std_string_Sc_std_string_Sg__iterator_setValue(arg1,(std::string const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_delete_1StdStringMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string >::iterator *arg1 = (std::map< std::string,std::string >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string >::iterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (bool)((std::map< std::string,std::string > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (arg1)->find((std::string const &)*arg2);
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator((const std::map< std::string,std::string >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (arg1)->begin();
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator((const std::map< std::string,std::string >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  result = (arg1)->end();
  *(std::map< std::string,std::string >::iterator **)&jresult = new std::map< std::string,std::string >::iterator((const std::map< std::string,std::string >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  try {
    result = std_map_Sl_std_string_Sc_std_string_Sg__sizeImpl((std::map< std::string,std::string > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2) {
  jboolean jresult = 0 ;
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return 0;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return 0;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  result = (bool)std_map_Sl_std_string_Sc_std_string_Sg__containsImpl(arg1,(std::string const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jstring jarg2, jstring jarg3) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::string *arg2 = 0 ;
  std::string *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  if(!jarg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg2_pstr = (const char *)jenv->GetStringUTFChars(jarg2, 0); 
  if (!arg2_pstr) return ;
  std::string arg2_str(arg2_pstr);
  arg2 = &arg2_str;
  jenv->ReleaseStringUTFChars(jarg2, arg2_pstr); 
  if(!jarg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "null string");
    return ;
  }
  const char *arg3_pstr = (const char *)jenv->GetStringUTFChars(jarg3, 0); 
  if (!arg3_pstr) return ;
  std::string arg3_str(arg3_pstr);
  arg3 = &arg3_str;
  jenv->ReleaseStringUTFChars(jarg3, arg3_pstr); 
  std_map_Sl_std_string_Sc_std_string_Sg__putUnchecked(arg1,(std::string const &)*arg2,(std::string const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_StdStringMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator arg2 ;
  std::map< std::string,std::string,std::less< std::string > >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  argp2 = *(std::map< std::string,std::string,std::less< std::string > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< std::string,std::string,std::less< std::string > >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  std_map_Sl_std_string_Sc_std_string_Sg__removeUnchecked(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_delete_1StdStringMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< std::string,std::string > *arg1 = (std::map< std::string,std::string > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< std::string,std::string > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_new_1BarMap_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::map< Bar,Bar > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::map< Bar,Bar > *)new std::map< Bar,Bar >();
  *(std::map< Bar,Bar > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_new_1BarMap_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< Bar,Bar > *arg1 = 0 ;
  std::map< Bar,Bar > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Bar,Bar > **)&jarg1;
  if (!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::map< Bar,Bar > const & reference is null");
    return 0;
  } 
  result = (std::map< Bar,Bar > *)new std::map< Bar,Bar >((std::map< Bar,Bar > const &)*arg1);
  *(std::map< Bar,Bar > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1Iterator_1getNextUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< Bar,Bar >::iterator *arg1 = (std::map< Bar,Bar >::iterator *) 0 ;
  std::map< Bar,Bar,std::less< Bar > >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Bar,Bar >::iterator **)&jarg1; 
  result = std_map_Sl_Bar_Sc_Bar_Sg__iterator_getNextUnchecked(arg1);
  *(std::map< Bar,Bar,std::less< Bar > >::iterator **)&jresult = new std::map< Bar,Bar,std::less< Bar > >::iterator((const std::map< Bar,Bar,std::less< Bar > >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1Iterator_1isNot(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< Bar,Bar >::iterator *arg1 = (std::map< Bar,Bar >::iterator *) 0 ;
  std::map< Bar,Bar >::iterator arg2 ;
  std::map< Bar,Bar >::iterator *argp2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< Bar,Bar >::iterator **)&jarg1; 
  argp2 = *(std::map< Bar,Bar >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< Bar,Bar >::iterator");
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)std_map_Sl_Bar_Sc_Bar_Sg__iterator_isNot((std::map< Bar,Bar >::iterator const *)arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1Iterator_1getKey(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< Bar,Bar >::iterator *arg1 = (std::map< Bar,Bar >::iterator *) 0 ;
  Bar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Bar,Bar >::iterator **)&jarg1; 
  result = std_map_Sl_Bar_Sc_Bar_Sg__iterator_getKey((std::map< Bar,Bar >::iterator const *)arg1);
  *(Bar **)&jresult = new Bar((const Bar &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1Iterator_1getValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< Bar,Bar >::iterator *arg1 = (std::map< Bar,Bar >::iterator *) 0 ;
  Bar result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Bar,Bar >::iterator **)&jarg1; 
  result = std_map_Sl_Bar_Sc_Bar_Sg__iterator_getValue((std::map< Bar,Bar >::iterator const *)arg1);
  *(Bar **)&jresult = new Bar((const Bar &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1Iterator_1setValue(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< Bar,Bar >::iterator *arg1 = (std::map< Bar,Bar >::iterator *) 0 ;
  Bar *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< Bar,Bar >::iterator **)&jarg1; 
  arg2 = *(Bar **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bar const & reference is null");
    return ;
  } 
  std_map_Sl_Bar_Sc_Bar_Sg__iterator_setValue(arg1,(Bar const &)*arg2);
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_delete_1BarMap_1Iterator(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< Bar,Bar >::iterator *arg1 = (std::map< Bar,Bar >::iterator *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< Bar,Bar >::iterator **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jboolean JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::map< Bar,Bar > *arg1 = (std::map< Bar,Bar > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Bar,Bar > **)&jarg1; 
  result = (bool)((std::map< Bar,Bar > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::map< Bar,Bar > *arg1 = (std::map< Bar,Bar > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Bar,Bar > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1find(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jlong jresult = 0 ;
  std::map< Bar,Bar > *arg1 = (std::map< Bar,Bar > *) 0 ;
  Bar *arg2 = 0 ;
  std::map< Bar,Bar >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< Bar,Bar > **)&jarg1; 
  arg2 = *(Bar **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bar const & reference is null");
    return 0;
  } 
  result = (arg1)->find((Bar const &)*arg2);
  *(std::map< Bar,Bar >::iterator **)&jresult = new std::map< Bar,Bar >::iterator((const std::map< Bar,Bar >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1begin(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< Bar,Bar > *arg1 = (std::map< Bar,Bar > *) 0 ;
  std::map< Bar,Bar >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Bar,Bar > **)&jarg1; 
  result = (arg1)->begin();
  *(std::map< Bar,Bar >::iterator **)&jresult = new std::map< Bar,Bar >::iterator((const std::map< Bar,Bar >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1end(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::map< Bar,Bar > *arg1 = (std::map< Bar,Bar > *) 0 ;
  std::map< Bar,Bar >::iterator result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Bar,Bar > **)&jarg1; 
  result = (arg1)->end();
  *(std::map< Bar,Bar >::iterator **)&jresult = new std::map< Bar,Bar >::iterator((const std::map< Bar,Bar >::iterator &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1sizeImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jint jresult = 0 ;
  std::map< Bar,Bar > *arg1 = (std::map< Bar,Bar > *) 0 ;
  jint result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::map< Bar,Bar > **)&jarg1; 
  try {
    result = std_map_Sl_Bar_Sc_Bar_Sg__sizeImpl((std::map< Bar,Bar > const *)arg1);
  } catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  jresult = result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1containsImpl(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  jboolean jresult = 0 ;
  std::map< Bar,Bar > *arg1 = (std::map< Bar,Bar > *) 0 ;
  Bar *arg2 = 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< Bar,Bar > **)&jarg1; 
  arg2 = *(Bar **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bar const & reference is null");
    return 0;
  } 
  result = (bool)std_map_Sl_Bar_Sc_Bar_Sg__containsImpl(arg1,(Bar const &)*arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1putUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_, jlong jarg3, jobject jarg3_) {
  std::map< Bar,Bar > *arg1 = (std::map< Bar,Bar > *) 0 ;
  Bar *arg2 = 0 ;
  Bar *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  (void)jarg3_;
  arg1 = *(std::map< Bar,Bar > **)&jarg1; 
  arg2 = *(Bar **)&jarg2;
  if (!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bar const & reference is null");
    return ;
  } 
  arg3 = *(Bar **)&jarg3;
  if (!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Bar const & reference is null");
    return ;
  } 
  std_map_Sl_Bar_Sc_Bar_Sg__putUnchecked(arg1,(Bar const &)*arg2,(Bar const &)*arg3);
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_BarMap_1removeUnchecked(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::map< Bar,Bar > *arg1 = (std::map< Bar,Bar > *) 0 ;
  std::map< Bar,Bar,std::less< Bar > >::iterator arg2 ;
  std::map< Bar,Bar,std::less< Bar > >::iterator const *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::map< Bar,Bar > **)&jarg1; 
  argp2 = *(std::map< Bar,Bar,std::less< Bar > >::iterator **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::map< Bar,Bar,std::less< Bar > >::iterator const");
    return ;
  }
  arg2 = *argp2; 
  std_map_Sl_Bar_Sc_Bar_Sg__removeUnchecked(arg1,arg2);
}


SWIGEXPORT void JNICALL Java_com_zhen_foo_FooModuleJNI_delete_1BarMap(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::map< Bar,Bar > *arg1 = (std::map< Bar,Bar > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::map< Bar,Bar > **)&jarg1; 
  delete arg1;
}


SWIGEXPORT jlong JNICALL Java_com_zhen_foo_FooModuleJNI_Baz_1SWIGUpcast(JNIEnv *jenv, jclass jcls, jlong jarg1) {
    jlong baseptr = 0;
    (void)jenv;
    (void)jcls;
    *(Foo **)&baseptr = *(Baz **)&jarg1;
    return baseptr;
}

#ifdef __cplusplus
}
#endif

